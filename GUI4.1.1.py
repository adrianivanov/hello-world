from PyQt5 import QtCore, QtGui, QtWidgets
from data import *
import pickle
import numpy as np

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(524, 469)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.amine = QtWidgets.QTextEdit(self.centralwidget)
        self.amine.setGeometry(QtCore.QRect(40, 60, 104, 87))
        self.amine.setObjectName("amine")
        self.sws = QtWidgets.QTextEdit(self.centralwidget)
        self.sws.setGeometry(QtCore.QRect(190, 60, 104, 87))
        self.sws.setObjectName("sws")
        self.gn = QtWidgets.QTextEdit(self.centralwidget)
        self.gn.setGeometry(QtCore.QRect(340, 60, 104, 87))
        self.gn.setObjectName("gn")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 30, 160, 16))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(180, 30, 147, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(340, 30, 139, 16))
        self.label_3.setObjectName("label_3")
        self.label_9 = QtWidgets.QLabel(self.centralwidget)
        self.label_9.setGeometry(QtCore.QRect(29, 323, 74, 16))
        self.label_9.setObjectName("label_9")
        self.label_8 = QtWidgets.QLabel(self.centralwidget)
        self.label_8.setGeometry(QtCore.QRect(30, 253, 124, 16))
        self.label_8.setObjectName("label_8")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(30, 207, 70, 16))
        self.label_4.setObjectName("label_4")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(30, 299, 73, 16))
        self.label_7.setObjectName("label_7")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(30, 276, 108, 16))
        self.label_6.setObjectName("label_6")
        self.layoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget.setGeometry(QtCore.QRect(158, 207, 101, 133))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.aer = QtWidgets.QLabel(self.layoutWidget)
        self.aer.setObjectName("aer")
        self.verticalLayout_2.addWidget(self.aer)
        self.presiune = QtWidgets.QLabel(self.layoutWidget)
        self.presiune.setObjectName("presiune")
        self.verticalLayout_2.addWidget(self.presiune)
        self.tempsoba = QtWidgets.QLabel(self.layoutWidget)
        self.tempsoba.setObjectName("tempsoba")
        self.verticalLayout_2.addWidget(self.tempsoba)
        self.temps1 = QtWidgets.QLabel(self.layoutWidget)
        self.temps1.setObjectName("temps1")
        self.verticalLayout_2.addWidget(self.temps1)
        self.anH2S = QtWidgets.QLabel(self.layoutWidget)
        self.anH2S.setObjectName("anH2S")
        self.verticalLayout_2.addWidget(self.anH2S)
        self.anSO2 = QtWidgets.QLabel(self.layoutWidget)
        self.anSO2.setObjectName("anSO2")
        self.verticalLayout_2.addWidget(self.anSO2)
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(30, 230, 98, 16))
        self.label_5.setObjectName("label_5")
        self.layoutWidget1 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget1.setGeometry(QtCore.QRect(340, 180, 136, 207))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.verticalLayout_5 = QtWidgets.QVBoxLayout(self.layoutWidget1)
        self.verticalLayout_5.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.calculeaza = QtWidgets.QPushButton(self.layoutWidget1)
        self.calculeaza.setObjectName("calculeaza")
        self.verticalLayout_5.addWidget(self.calculeaza)
        self.verticalLayout_4 = QtWidgets.QVBoxLayout()
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.button_poly = QtWidgets.QPushButton(self.layoutWidget1)
        self.button_poly.setObjectName("button_poly")
        self.verticalLayout_4.addWidget(self.button_poly)
        self.button_svr = QtWidgets.QPushButton(self.layoutWidget1)
        self.button_svr.setObjectName("button_svr")
        self.verticalLayout_4.addWidget(self.button_svr)
        self.button_tree = QtWidgets.QPushButton(self.layoutWidget1)
        self.button_tree.setObjectName("button_tree")
        self.verticalLayout_4.addWidget(self.button_tree)
        self.button_forest = QtWidgets.QPushButton(self.layoutWidget1)
        self.button_forest.setObjectName("button_forest")
        self.verticalLayout_4.addWidget(self.button_forest)
        self.button_linear = QtWidgets.QPushButton(self.layoutWidget1)
        self.button_linear.setObjectName("button_linear")
        self.verticalLayout_4.addWidget(self.button_linear)
        self.verticalLayout_5.addLayout(self.verticalLayout_4)
        self.label_10 = QtWidgets.QLabel(self.centralwidget)
        self.label_10.setGeometry(QtCore.QRect(260, 170, 65, 16))
        self.label_10.setObjectName("label_10")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(270, 210, 57, 133))
        self.widget.setObjectName("widget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.widget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.scoraer = QtWidgets.QLabel(self.widget)
        self.scoraer.setObjectName("scoraer")
        self.verticalLayout.addWidget(self.scoraer)
        self.scorpres = QtWidgets.QLabel(self.widget)
        self.scorpres.setObjectName("scorpres")
        self.verticalLayout.addWidget(self.scorpres)
        self.scorsoba = QtWidgets.QLabel(self.widget)
        self.scorsoba.setObjectName("scorsoba")
        self.verticalLayout.addWidget(self.scorsoba)
        self.scors1 = QtWidgets.QLabel(self.widget)
        self.scors1.setObjectName("scors1")
        self.verticalLayout.addWidget(self.scors1)
        self.scorh2s = QtWidgets.QLabel(self.widget)
        self.scorh2s.setObjectName("scorh2s")
        self.verticalLayout.addWidget(self.scorh2s)
        self.scorso2 = QtWidgets.QLabel(self.widget)
        self.scorso2.setObjectName("scorso2")
        self.verticalLayout.addWidget(self.scorso2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 524, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.dialog = QtWidgets.QLabel(self.centralwidget)
        self.dialog.setGeometry(QtCore.QRect(100, 360, 191, 91))
        self.dialog.setObjectName("dialog")

        self.calculeaza.clicked.connect(self.pressed_neural)
        self.button_linear.clicked.connect(self.pressed_linear)
        self.button_tree.clicked.connect(self.pressed_tree)
        self.button_forest.clicked.connect(self.pressed_forest)
        self.button_svr.clicked.connect(self.pressed_svr)
        self.button_poly.clicked.connect(self.pressed_poly)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "Introduceti debitul de amine"))
        self.label_2.setText(_translate("MainWindow", "Introduceti debitul de sws"))
        self.label_3.setText(_translate("MainWindow", "Introduceti debitul de gn"))
        self.label_9.setText(_translate("MainWindow", "Analizor SO2"))
        self.label_8.setText(_translate("MainWindow", "Temperatura pe soba"))
        self.label_4.setText(_translate("MainWindow", "Debit de aer"))
        self.label_7.setText(_translate("MainWindow", "Analizor H2S"))
        self.label_6.setText(_translate("MainWindow", "Temperatura la S1"))
        self.aer.setText(_translate("MainWindow", "TextLabel"))
        self.presiune.setText(_translate("MainWindow", "TextLabel"))
        self.tempsoba.setText(_translate("MainWindow", "TextLabel"))
        self.temps1.setText(_translate("MainWindow", "TextLabel"))
        self.anH2S.setText(_translate("MainWindow", "TextLabel"))
        self.anSO2.setText(_translate("MainWindow", "TextLabel"))
        self.label_5.setText(_translate("MainWindow", "Presiune pe soba"))
        self.calculeaza.setText(_translate("MainWindow", "Neural Regressor"))
        self.button_poly.setText(_translate("MainWindow", "Regresie Polinomiala"))
        self.button_svr.setText(_translate("MainWindow", "Support Vectors"))
        self.button_tree.setText(_translate("MainWindow", "Decision Tree"))
        self.button_forest.setText(_translate("MainWindow", "Random Forest"))
        self.button_linear.setText(_translate("MainWindow", "Regresie Liniara"))
        self.label_10.setText(_translate("MainWindow", "Scor (R sq)"))
        self.scoraer.setText(_translate("MainWindow", "TextLabel"))
        self.scorpres.setText(_translate("MainWindow", "TextLabel"))
        self.scorsoba.setText(_translate("MainWindow", "TextLabel"))
        self.scors1.setText(_translate("MainWindow", "TextLabel"))
        self.scorh2s.setText(_translate("MainWindow", "TextLabel"))
        self.scorso2.setText(_translate("MainWindow", "TextLabel"))
        self.dialog.setText(_translate("MainWindow", "Mesaje"))


    def pressed_neural(self):

        try:
            amine = float(self.amine.toPlainText())
            sws = float(self.sws.toPlainText())
            gn = float(self.gn.toPlainText())


            pickle_aer = open('neural_aer.pickle', 'rb')
            bacon_aer = pickle.load(pickle_aer)
            predictie_aer = bacon_aer.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            aer_unsc = sc_y_aer.inverse_transform(predictie_aer)
            self.aer.setText(str(aer_unsc))
            
            pickle_pres = open('neural_pres.pickle', 'rb')
            bacon_pres = pickle.load(pickle_pres)
            predictie_pres = bacon_pres.predict(sc_y_aer.transform(np.array([aer_unsc])))
            self.presiune.setText(str(predictie_pres))
            
            pickle_h2s = open('neural_h2s.pickle', 'rb')
            bacon_h2s = pickle.load(pickle_h2s)
            predictie_h2s = bacon_h2s.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            h2s_unsc = sc_h2s.inverse_transform(predictie_h2s)
            self.anH2S.setText(str(h2s_unsc))
            
            pickle_so2 = open('neural_so2.pickle', 'rb')
            bacon_so2 = pickle.load(pickle_so2)
            predictie_so2 = bacon_so2.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            so2_unsc = sc_so2.inverse_transform(predictie_so2)
            self.anSO2.setText(str(so2_unsc))
            
            pickle_s1 = open('neural_s1.pickle', 'rb')
            bacon_s1 = pickle.load(pickle_s1)
            predictie_s1 = bacon_s1.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            s1_unsc = sc_s1.inverse_transform(predictie_s1)
            self.temps1.setText(str(s1_unsc))
            
            pickle_soba = open('neural_soba.pickle', 'rb')
            bacon_soba = pickle.load(pickle_soba)
            predictie_soba = bacon_soba.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            soba_unsc = sc_soba.inverse_transform(predictie_soba)
            self.tempsoba.setText(str(soba_unsc))
            
            pickle_scor = open('li_neural.pickle', 'rb')
            bacon_scor = pickle.load(pickle_scor)
            a, b, c, d, e, f = bacon_scor
            self.scoraer.setText(str(a))
            self.scorpres.setText(str(b))
            self.scorsoba.setText(str(c))
            self.scors1.setText(str(d))
            self.scorh2s.setText(str(e))
            self.scorso2.setText(str(f))
            self.dialog.setText("Succes!")
        except:
            self.dialog.setText("you are not very smart, are you")
        

    def pressed_linear(self):
        try:
            amine = float(self.amine.toPlainText())
            sws = float(self.sws.toPlainText())
            gn = float(self.gn.toPlainText())
            
            pickle_aer = open('linear_aer.pickle', 'rb')
            bacon_aer = pickle.load(pickle_aer)
            predictie_aer = bacon_aer.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            aer_unsc = sc_y_aer.inverse_transform(predictie_aer)
            self.aer.setText(str(aer_unsc))
            
            pickle_pres = open('linear_pres.pickle', 'rb')
            bacon_pres = pickle.load(pickle_pres)
            predictie_pres = bacon_pres.predict(sc_y_aer.transform(np.array(aer_unsc)))
            self.presiune.setText(str(predictie_pres))
            
            pickle_h2s = open('linear_h2s.pickle', 'rb')
            bacon_h2s = pickle.load(pickle_h2s)
            predictie_h2s = bacon_h2s.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            h2s_unsc = sc_h2s.inverse_transform(predictie_h2s)
            self.anH2S.setText(str(h2s_unsc))
            
            pickle_so2 = open('linear_so2.pickle', 'rb')
            bacon_so2 = pickle.load(pickle_so2)
            predictie_so2 = bacon_so2.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            so2_unsc = sc_so2.inverse_transform(predictie_so2)
            self.anSO2.setText(str(so2_unsc))
            
            pickle_s1 = open('linear_s1.pickle', 'rb')
            bacon_s1 = pickle.load(pickle_s1)
            predictie_s1 = bacon_s1.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            s1_unsc = sc_s1.inverse_transform(predictie_s1)
            self.temps1.setText(str(s1_unsc))
            
            pickle_soba = open('linear_soba.pickle', 'rb')
            bacon_soba = pickle.load(pickle_soba)
            predictie_soba = bacon_soba.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            soba_unsc = sc_soba.inverse_transform(predictie_soba)
            self.tempsoba.setText(str(soba_unsc))
            
            pickle_scor = open('li_linear.pickle', 'rb')
            bacon_scor = pickle.load(pickle_scor)
            a, b, c, d, e, f = bacon_scor
            self.scoraer.setText(str(a))
            self.scorpres.setText(str(b))
            self.scorsoba.setText(str(c))
            self.scors1.setText(str(d))
            self.scorh2s.setText(str(e))
            self.scorso2.setText(str(f))
            self.dialog.setText("Succes!")
        except:
            self.dialog.setText("you are not very smart, are you")

    def pressed_tree(self):
        try:
            amine = float(self.amine.toPlainText())
            sws = float(self.sws.toPlainText())
            gn = float(self.gn.toPlainText())

            pickle_aer = open('tree_aer.pickle', 'rb')
            bacon_aer = pickle.load(pickle_aer)
            predictie_aer = bacon_aer.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            aer_unsc = sc_y_aer.inverse_transform(predictie_aer)
            self.aer.setText(str(aer_unsc))
            
            pickle_pres = open('tree_pres.pickle', 'rb')
            bacon_pres = pickle.load(pickle_pres)
            predictie_pres = bacon_pres.predict(sc_y_aer.transform(np.array([aer_unsc])))
            self.presiune.setText(str(predictie_pres))
            
            pickle_h2s = open('tree_h2s.pickle', 'rb')
            bacon_h2s = pickle.load(pickle_h2s)
            predictie_h2s = bacon_h2s.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            h2s_unsc = sc_h2s.inverse_transform(predictie_h2s)
            self.anH2S.setText(str(h2s_unsc))
            
            pickle_so2 = open('tree_so2.pickle', 'rb')
            bacon_so2 = pickle.load(pickle_so2)
            predictie_so2 = bacon_so2.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            so2_unsc = sc_so2.inverse_transform(predictie_so2)
            self.anSO2.setText(str(so2_unsc))
            
            pickle_s1 = open('tree_s1.pickle', 'rb')
            bacon_s1 = pickle.load(pickle_s1)
            predictie_s1 = bacon_s1.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            s1_unsc = sc_s1.inverse_transform(predictie_s1)
            self.temps1.setText(str(s1_unsc))
            
            pickle_soba = open('tree_soba.pickle', 'rb')
            bacon_soba = pickle.load(pickle_soba)
            predictie_soba = bacon_soba.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            soba_unsc = sc_soba.inverse_transform(predictie_soba)
            self.tempsoba.setText(str(soba_unsc))
                    
            pickle_scor = open('li_tree.pickle', 'rb')
            bacon_scor = pickle.load(pickle_scor)
            a,b,c,d,e,f = bacon_scor
            self.scoraer.setText(str(a))
            self.scorpres.setText(str(b))
            self.scorsoba.setText(str(c))
            self.scors1.setText(str(d))
            self.scorh2s.setText(str(e))
            self.scorso2.setText(str(f))
            self.dialog.setText("Succes!")
        except:
            self.dialog.setText("you are not very smart, are you")
    
    def pressed_forest(self):
        try:

            amine = float(self.amine.toPlainText())
            sws = float(self.sws.toPlainText())
            gn = float(self.gn.toPlainText())
            
            pickle_aer = open('forest_aer.pickle', 'rb')
            bacon_aer = pickle.load(pickle_aer)
            predictie_aer = bacon_aer.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            aer_unsc = sc_y_aer.inverse_transform(predictie_aer)
            self.aer.setText(str(aer_unsc))
            
            pickle_pres = open('forest_pres.pickle', 'rb')
            bacon_pres = pickle.load(pickle_pres)
            predictie_pres = bacon_pres.predict(sc_y_aer.transform(np.array([aer_unsc])))
            self.presiune.setText(str(predictie_pres))
            
            pickle_h2s = open('forest_h2s.pickle', 'rb')
            bacon_h2s = pickle.load(pickle_h2s)
            predictie_h2s = bacon_h2s.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            h2s_unsc = sc_h2s.inverse_transform(predictie_h2s)
            self.anH2S.setText(str(h2s_unsc))
            
            pickle_so2 = open('forest_so2.pickle', 'rb')
            bacon_so2 = pickle.load(pickle_so2)
            predictie_so2 = bacon_so2.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            so2_unsc = sc_so2.inverse_transform(predictie_so2)
            self.anSO2.setText(str(so2_unsc))
            
            pickle_s1 = open('forest_s1.pickle', 'rb')
            bacon_s1 = pickle.load(pickle_s1)
            predictie_s1 = bacon_s1.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            s1_unsc = sc_s1.inverse_transform(predictie_s1)
            self.temps1.setText(str(s1_unsc))
            
            pickle_soba = open('forest_soba.pickle', 'rb')
            bacon_soba = pickle.load(pickle_soba)
            predictie_soba = bacon_soba.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            soba_unsc = sc_soba.inverse_transform(predictie_soba)
            self.tempsoba.setText(str(soba_unsc))
                    
            pickle_scor = open('li_forest.pickle', 'rb')
            bacon_scor = pickle.load(pickle_scor)
            a,b,c,d,e,f = bacon_scor
            self.scoraer.setText(str(a))
            self.scorpres.setText(str(b))
            self.scorsoba.setText(str(c))
            self.scors1.setText(str(d))
            self.scorh2s.setText(str(e))
            self.scorso2.setText(str(f))
            self.dialog.setText("Succes!")
        except:
            self.dialog.setText("you are not very smart, are you")
    
    def pressed_svr(self):
        try:
            amine = float(self.amine.toPlainText())
            sws = float(self.sws.toPlainText())
            gn = float(self.gn.toPlainText())
            
            pickle_aer = open('svr_aer.pickle', 'rb')
            bacon_aer = pickle.load(pickle_aer)
            predictie_aer = bacon_aer.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            aer_unsc = sc_y_aer.inverse_transform(predictie_aer)
            self.aer.setText(str(aer_unsc))
            
            pickle_pres = open('svr_pres.pickle', 'rb')
            bacon_pres = pickle.load(pickle_pres)
            predictie_pres = bacon_pres.predict(sc_y_aer.transform(np.array([aer_unsc])))
            self.presiune.setText(str(predictie_pres))
            
            pickle_h2s = open('svr_h2s.pickle', 'rb')
            bacon_h2s = pickle.load(pickle_h2s)
            predictie_h2s = bacon_h2s.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            h2s_unsc = sc_h2s.inverse_transform(predictie_h2s)
            self.anH2S.setText(str(h2s_unsc))
            
            pickle_so2 = open('svr_so2.pickle', 'rb')
            bacon_so2 = pickle.load(pickle_so2)
            predictie_so2 = bacon_so2.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            so2_unsc = sc_so2.inverse_transform(predictie_so2)
            self.anSO2.setText(str(so2_unsc))
            
            pickle_s1 = open('svr_s1.pickle', 'rb')
            bacon_s1 = pickle.load(pickle_s1)
            predictie_s1 = bacon_s1.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            s1_unsc = sc_s1.inverse_transform(predictie_s1)
            self.temps1.setText(str(s1_unsc))
            
            pickle_soba = open('svr_soba.pickle', 'rb')
            bacon_soba = pickle.load(pickle_soba)
            predictie_soba = bacon_soba.predict(sc_x_aer.transform(np.array([amine, sws, gn]).reshape(1, 3)))
            soba_unsc = sc_soba.inverse_transform(predictie_soba)
            self.tempsoba.setText(str(soba_unsc))
                    
            pickle_scor = open('li_svr.pickle', 'rb')
            bacon_scor = pickle.load(pickle_scor)
            a,b,c,d,e,f = bacon_scor
            self.scoraer.setText(str(a))
            self.scorpres.setText(str(b))
            self.scorsoba.setText(str(c))
            self.scors1.setText(str(d))
            self.scorh2s.setText(str(e))
            self.scorso2.setText(str(f))
            self.dialog.setText("Succes!")
        except:
            self.dialog.setText("you are not very smart, are you")
        
    def pressed_poly(self):
        self.aer.setText("not implemented")
        self.presiune.setText("not implemented")
        self.anH2S.setText("not implemented")
        self.anSO2.setText("not implemented")
        self.temps1.setText("not implemented")
        self.tempsoba.setText("not implemented")
        self.scoraer.setText('NaN')
        self.scorpres.setText('NaN')
        self.scorsoba.setText('NaN')
        self.scors1.setText('NaN')
        self.scorh2s.setText('NaN')
        self.scorso2.setText('NaN')
        self.dialog.setText("this feature is not working right now")


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())

